dev.off()
pairs(Auto,col="brown")
pairs(mpg~cylinders+acceleration+weight,Auto)
q()
require(ggplot2)
require(MASS)
require(islr)
install.packages("ISLR")
library(MASS)
install.packages("ISLR")
library(MASS)
#install.packages("ISLR")
library(ISLR)
library(MASS)
install.packages("ISLR")
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
library(MASS)
install.packages("ISLR")
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
pdf("regression-partA.pdf")
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
#pdf("regression-partA.pdf")
#plot()
dev.off()
library(MASS)
#install.packages("ISLR")
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
getwd()
require(ISLR)
require(MASS)
## Linear Discriminant Analysis
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
lda.fit
plot(lda.fit)
Smarket.2005=subset(Smarket,Year==2005)
install.packages("RCurl")
library(Biostrings)
library(RCurl)
library(rentrez)
seq1 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "187830855") #human
install.packages("curl")
install.packages("curl")
library(devtools)
install_github("hadley/httr")
install.packages(devtools)
install.packages("devtools")
library(devtools)
install_github("hadley/httr")
library(Biostrings)
library(RCurl)
library(rentrez)
seq1 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "187830855") #human
library(Biostrings)
library(RCurl)
library(rentrez)
seq1 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "187830855") #human
library(curl)
install.packages(c("RCurl","pander","RJSONIO"))
install.packages(c("RCurl", "pander", "RJSONIO"))
library(Biostrings)
library(RCurl)
library(curl)
library(Biostrings)
library(RCurl)
library(rentrez)
seq1 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "187830855") #human
seq2 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "470595373") # bottlenosed dolphin
version()
library(ISLR)
lm.fitbest = lm(Sales ~ Price + US)
lm.fit = lm(Sales~Price+Urban+US)
attach(Carseats)
lm.fitbest = lm(Sales ~ Price + US)
summary(lm.fitbest)
confint(lm.fitbest)
plot(predict(lm.fitbest), rstudent(lm.fitbest))
par(mfrow=c(2,2))
plot(lm.fitbest)
set.seed(1)
x = rnorm(100)
# 13.b)
eps = rnorm(100, 0, sqrt(0.25))
# 13.c)
y = -1 + 0.5*x + eps
length(y)
# 13.d)
plot(x, y)
lm.fit = lm(y~x)
summary(lm.fit)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
plot(x, y)
abline(-1, 0.5, lwd=3, col=3)
abline(lm.fit, lwd=3, col=2)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
par(mfrow=c(1,1))
plot(x, y)
plot(x, y)
abline(-1, 0.5, lwd=3, col=3)
abline(lm.fit, lwd=3, col=2)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("Fit-of-Model", "Regression-of-Population"), col=2:3, lwd=3)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("Fit-of-Model", "Regression-of-Pop."), col=2:3, lwd=3)
lm.fit_sq = lm( y ~ x + I(x^2))
summary(lm.fit_sq)
set.seed(1)
eps_new = rnorm(100, 0, 0.125)
x1 = rnorm(100)
y1 = -1 + 0.5*x1 + eps_new
plot(x1, y1)
lm.fitnew = lm(y1~x1)
summary(lm.fitnew)
abline(lm.fit1, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("Fit-Of-Model", "Regression-Of-Pop."), col=2:3, lwd=3)
set.seed(1)
epsnew2 = rnorm(100, 0, 0.5)
x2 = rnorm(100)
y2 = -1 + 0.5*x2 + epsnew2
plot(x2, y2)
lm.fitnew2 = lm(y2~x2)
summary(lm.fitnew2)
abline(lm.fit2, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("Fit-Of-Model", "Regression-Of-Pop."), col=2:3, lwd=3)
abline(lm.fitnew2, lwd=3, col=2)
confint(lm.fit)
confint(lm.fitnew)
confint(lm.fitnew2)
library(MASS)
summary(Boston)
Boston$chas <- factor(Boston$chas, labels = c("N","Y"))
summary(Boston)
attach(Boston)
lm.zn = lm(crim~zn)
summary(lm.zn) # yes
?Boston
lm.rm = lm(crim~rm)
summary(lm.rm)
lm.all = lm(crim~.)
lm.all = lm(crim~., data="Boston")
lm.all = lm(crim~., data='Boston')
lm.all = lm(crim~., data=Boston)
summary(lm.all)
lm.black = lm(crim~black)
summary(lm.black)
summary(lm.all)
x = c(coefficients(lm.zn)[2], coefficients(lm.indus)[2], coefficients(lm.chas)[2],
coefficients(lm.nox)[2], coefficients(lm.rm)[2], coefficients(lm.age)[2],
coefficients(lm.dis)[2], coefficients(lm.rad)[2], coefficients(lm.tax)[2],
coefficients(lm.ptratio)[2], coefficients(lm.black)[2], coefficients(lm.lstat)[2],
coefficients(lm.medv)[2])
y = coefficients(lm.all)[2:14]
plot(x, y)
lm.indus = lm(crim~indus)
x = c(coefficients(lm.zn)[2], coefficients(lm.indus)[2], coefficients(lm.chas)[2],
coefficients(lm.nox)[2], coefficients(lm.rm)[2], coefficients(lm.age)[2],
coefficients(lm.dis)[2], coefficients(lm.rad)[2], coefficients(lm.tax)[2],
coefficients(lm.ptratio)[2], coefficients(lm.black)[2], coefficients(lm.lstat)[2],
coefficients(lm.medv)[2])
lm.all = lm(crim~., data=Boston)
lm.zn = lm(crim~zn)
lm.indus = lm(crim~indus)
lm.chas = lm(crim~chas)
lm.nox = lm(crim~nox)
lm.rm = lm(crim~rm)
lm.age = lm(crim~age)
lm.dis = lm(crim~dis)
lm.rad = lm(crim~rad)
lm.tax = lm(crim~tax)
lm.ptratio = lm(crim~ptratio)
lm.black = lm(crim~black)
lm.lstat = lm(crim~lstat)
lm.medv = lm(crim~medv)
x = c(coefficients(lm.zn)[2], coefficients(lm.indus)[2], coefficients(lm.chas)[2],
coefficients(lm.nox)[2], coefficients(lm.rm)[2], coefficients(lm.age)[2],
coefficients(lm.dis)[2], coefficients(lm.rad)[2], coefficients(lm.tax)[2],
coefficients(lm.ptratio)[2], coefficients(lm.black)[2], coefficients(lm.lstat)[2],
coefficients(lm.medv)[2])
y = coefficients(lm.all)[2:14]
plot(x, y)
lm.zn = lm(crim~poly(zn,3))
summary(lm.zn)
lm.indus = lm(crim~poly(indus,3))
summary(lm.indus)
lm.nox = lm(crim~poly(nox,3))
summary(lm.nox)
lm.rm = lm(crim~poly(rm,3))
summary(lm.rm)
lm.age = lm(crim~poly(age,3))
summary(lm.age)
lm.dis = lm(crim~poly(dis,3))
summary(lm.dis)
lm.rad = lm(crim~poly(rad,3))
summary(lm.rad)
lm.tax = lm(crim~poly(tax,3))
summary(lm.tax)
lm.ptratio = lm(crim~poly(ptratio,3))
summary(lm.ptratio)
lm.black = lm(crim~poly(black,3))
summary(lm.black
lm.black = lm(crim~poly(black,3))
summary(lm.black)
lm.lstat = lm(crim~poly(lstat,3))
summary(lm.lstat)
lm.medv = lm(crim~poly(medv,3))
summary(lm.medv)
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta #pretty slow (doesnt use formula (5.2) on page 180)
###me entry
cv.glm(Auto,glm.fit)$K
###
##Lets write a simple function to use formula (5.2)
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
## Now we try it out
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d]=loocv(glm.fit)
}
plot(degree,cv.error,type="b")
## 10-fold CV
cv.error10=rep(0,5)
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
getwd()
setwd("C:/Users/Naseem Ashraf/Desktop 1/Fall 16/Datamining")
library(ISLR)
library(ISLR)
dim(Hitters)
head(Hitters)
n = dimen[0]
dimen = dim(Hitters)
n = dimen[0]
n
n = dimen[1]
n
d = dimen[2]
head(Hitters)
d
library(ISLR)
dimen = dim(Hitters)
n = dimen[1]
d = dimen[2]
print("n = "+n)
print("n = "+n.toString)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
library(leaps)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
library(ISLR)
library(leaps)
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
library(ISLR)
? Hitters
summary(Hitters)
Hitters=na.omit(Hitters)
?na.omit
with(Hitters,sum(is.na(Salary)))
library(leaps)
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
with(Hitters,sum(is.na(Salary)))
library(ISLR)
dimen = dim(Hitters)
n = dimen[1]
d = dimen[2]
n
d
Hitters=na.omit(Hitters)
dimen = dim(Hitters)
n = dimen[1]
d = dimen[2]
n
d
library(leaps)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
setwd("C:/Users/Naseem Ashraf/Desktop 1/Fall 16/Bioinformatics/ML Assignment")
library("foreign")
raw <- read.arff("disease2a.arff")
summary(raw)
plot(raw$location1)
plot(raw$location1, y = "Frequency")
plot(raw$location1, ylabel = "Frequency", xlabel="Factors of Location1")
plot(raw$location1, ylabel = 'Frequency', xlabel='Factors of Location1')
plot(raw$location1, ylabel = 'Frequency', xlabel='Factors of Location1')
warnings()
plot(raw$location1, ylabel = 'Frequency', xlabel='Factors of Location1')
plot(raw$location2, ylabel = "Frequency", xlabel="Factors of Location2")
plot(raw$location3, ylabel = "Frequency", xlabel="Factors of Location3")
plot(raw$location4, ylabel = "Frequency", xlabel="Factors of Location4")
plot(raw$location5, ylabel = "Frequency", xlabel="Factors of Location5")
plot(raw$location6, ylabel = "Frequency", xlabel="Factors of Location6")
plot(raw$location7, ylabel = "Frequency", xlabel="Factors of Location7")
plot(raw$location8, ylabel = "Frequency", xlabel="Factors of Location8")
plot(raw$location9, ylabel = "Frequency", xlabel="Factors of Location9")
plot(raw$location10, ylabel = "Frequency", xlabel="Factors of Location10")
plot(raw$class, ylabel = "Frequency", xlabel="Factors of Classification")
plot(raw$location1, ylab = 'Frequency', xlab='Factors of Location1')
plot(raw$location2, ylab = "Frequency", xlab="Factors of Location2")
plot(raw$location3, ylab = "Frequency", xlab="Factors of Location3")
plot(raw$location4, ylab = "Frequency", xlab="Factors of Location4")
plot(raw$location5, ylab = "Frequency", xlab="Factors of Location5")
plot(raw$location6, ylab = "Frequency", xlab="Factors of Location6")
plot(raw$location7, ylab = "Frequency", xlab="Factors of Location7")
plot(raw$location8, ylab = "Frequency", xlab="Factors of Location8")
plot(raw$location9, ylab = "Frequency", xlab="Factors of Location9")
plot(raw$location10, ylab = "Frequency", xlab="Factors of Location10")
plot(raw$class, ylab = "Frequency", xlab="Factors of Classification")
glm.fitinteractions22=glm(class~ *-1, data=train, family=binomial)
glm.fitinteractions22=glm(class~ .*-1, data=train, family=binomial)
train_size <- floor((2/3) * nrow(raw))
set.seed(123)
train_ind <- sample(seq_len(nrow(raw)), size = train_size)
train <- raw[train_ind, ]
test <- raw[-train_ind, ]
test_ind <- !(1:nrow(raw) %in% train_ind)
glm.fitbest=glm(class~ location1+location5+location10+.*.-1, data=train, family=binomial)
summary(glm.fitbest)
exp(glm.fitbest$coefficients)
glm.fitbest=glm(class~ location1+location5+location10+.*.-1, data=train, family=binomial)
summary(glm.fitbest)
glm.fit=glm(class~., data=raw, family=binomial)
summary(glm.fit)
glm.fitno=glm(class~.-1, data=train, family=binomial)
summary(glm.fitno)
glm.fit1=glm(class~location1+location5+location10-1, data=train, family=binomial)
summary(glm.fit1)
library("foreign")
raw <- read.arff("disease2a.arff")
glm.fitno=glm(class~.-1, data=raw, family=binomial)
summary(glm.fitno)
glm.fit1=glm(class~location1+location5+location10-1, data=raw, family=binomial)
summary(glm.fit1)
glm.fitinteractions=glm(class~ .*.-1, data=raw, family=binomial)
summary(glm.fitinteractions)
glm.fitbest=glm(class~ location1+location5+location10+.*.-1, data=raw, family=binomial)
summary(glm.fitbest)
exp(glm.fitbest$coefficients)
glm.fit1=glm(class~location1+location5+location10-1, data=raw, family=binomial)
exp(glm.fit1$coefficients)
summary(glm.fit1)
glm.fitfull=glm(class~ .+.*.-1, data=raw, family=binomial)
summary(glm.fitfull)
glm.fit=glm(class~., data=raw, family=binomial)
plot(glm.fit)
glm.fit=glm(class~., data=raw, family=binomial)
par(mfrow=c(2,2))
plot(glm.fit,1)
plot(glm.fit,2)
plot(glm.fit,3)
plot(glm.fit,4)
par(mfrow=c(2,2))
plot(glm.fit,1)
plot(glm.fit,2)
plot(glm.fit,3)
plot(glm.fit,4)
par(mfrow=c(2,2))
plot(glm.fit,1)
plot(glm.fit,2)
plot(glm.fit,3)
plot(glm.fit,4)
par(mfrow=c(2,2))
plot(glm.fitno,1)
plot(glm.fitno,2)
plot(glm.fitno,3)
plot(glm.fitno,4)
glm.fit1=glm(class~location1+location5+location10-1, data=raw, family=binomial)
par(mfrow=c(2,2))
plot(glm.fit1,1)
plot(glm.fit1,2)
plot(glm.fit1,3)
plot(glm.fit1,4)
glm.fitinteractions=glm(class~ .*.-1, data=raw, family=binomial)
par(mfrow=c(2,2))
plot(glm.fitinteractions,1)
plot(glm.fitinteractions,2)
plot(glm.fitinteractions,3)
plot(glm.fitinteractions,4)
glm.fitfull=glm(class~ .+.*.-1, data=raw, family=binomial)
par(mfrow=c(2,2))
plot(glm.fitfull,1)
plot(glm.fitfull,2)
plot(glm.fitfull,3)
plot(glm.fitfull,4)

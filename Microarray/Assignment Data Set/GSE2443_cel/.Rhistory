g + geom_histogram(aes(fill=colors)) #default position and binwidth
g + geom_histogram(aes(fill=colors), binwidth=1) #default position is stack
g + geom_histogram(aes(fill=colors),position = "dodge", binwidth=1)
### Reading in data
Auto=read.csv("Auto.csv")
getwd()
Auto=read.csv("../Auto.csv")
names(Auto)
dim(Auto)
class(Auto)
summary(Auto)
plot(Auto$cylinders,Auto$mpg)
plot(Auto$cyl,Auto$mpg)
attach(Auto)
search()
plot(cylinders,mpg)
cylinders=as.factor(cylinders)
plot(cylinders,mpg,xlab="Cylinders",ylab="Mpg",col="red")
pdf(file="mpg.pdf")
plot(cylinders,mpg,xlab="Cylinders",ylab="Mpg",col="red")
dev.off()
pairs(Auto,col="brown")
pairs(mpg~cylinders+acceleration+weight,Auto)
q()
require(ggplot2)
require(MASS)
require(islr)
install.packages("ISLR")
library(MASS)
install.packages("ISLR")
library(MASS)
#install.packages("ISLR")
library(ISLR)
library(MASS)
install.packages("ISLR")
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
library(MASS)
install.packages("ISLR")
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
pdf("regression-partA.pdf")
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
#pdf("regression-partA.pdf")
#plot()
dev.off()
library(MASS)
#install.packages("ISLR")
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
getwd()
require(ISLR)
require(MASS)
## Linear Discriminant Analysis
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
lda.fit
plot(lda.fit)
Smarket.2005=subset(Smarket,Year==2005)
install.packages("RCurl")
library(Biostrings)
library(RCurl)
library(rentrez)
seq1 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "187830855") #human
install.packages("curl")
install.packages("curl")
library(devtools)
install_github("hadley/httr")
install.packages(devtools)
install.packages("devtools")
library(devtools)
install_github("hadley/httr")
library(Biostrings)
library(RCurl)
library(rentrez)
seq1 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "187830855") #human
library(Biostrings)
library(RCurl)
library(rentrez)
seq1 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "187830855") #human
library(curl)
install.packages(c("RCurl","pander","RJSONIO"))
install.packages(c("RCurl", "pander", "RJSONIO"))
library(Biostrings)
library(RCurl)
library(curl)
library(Biostrings)
library(RCurl)
library(rentrez)
seq1 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "187830855") #human
seq2 <- entrez_fetch(db = "sequences", rettype = 'fasta', id = "470595373") # bottlenosed dolphin
version()
library(ISLR)
lm.fitbest = lm(Sales ~ Price + US)
lm.fit = lm(Sales~Price+Urban+US)
attach(Carseats)
lm.fitbest = lm(Sales ~ Price + US)
summary(lm.fitbest)
confint(lm.fitbest)
plot(predict(lm.fitbest), rstudent(lm.fitbest))
par(mfrow=c(2,2))
plot(lm.fitbest)
set.seed(1)
x = rnorm(100)
# 13.b)
eps = rnorm(100, 0, sqrt(0.25))
# 13.c)
y = -1 + 0.5*x + eps
length(y)
# 13.d)
plot(x, y)
lm.fit = lm(y~x)
summary(lm.fit)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
plot(x, y)
abline(-1, 0.5, lwd=3, col=3)
abline(lm.fit, lwd=3, col=2)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
par(mfrow=c(1,1))
plot(x, y)
plot(x, y)
abline(-1, 0.5, lwd=3, col=3)
abline(lm.fit, lwd=3, col=2)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("model fit", "pop. regression"), col=2:3, lwd=3)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("Fit-of-Model", "Regression-of-Population"), col=2:3, lwd=3)
plot(x, y)
abline(lm.fit, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("Fit-of-Model", "Regression-of-Pop."), col=2:3, lwd=3)
lm.fit_sq = lm( y ~ x + I(x^2))
summary(lm.fit_sq)
set.seed(1)
eps_new = rnorm(100, 0, 0.125)
x1 = rnorm(100)
y1 = -1 + 0.5*x1 + eps_new
plot(x1, y1)
lm.fitnew = lm(y1~x1)
summary(lm.fitnew)
abline(lm.fit1, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("Fit-Of-Model", "Regression-Of-Pop."), col=2:3, lwd=3)
set.seed(1)
epsnew2 = rnorm(100, 0, 0.5)
x2 = rnorm(100)
y2 = -1 + 0.5*x2 + epsnew2
plot(x2, y2)
lm.fitnew2 = lm(y2~x2)
summary(lm.fitnew2)
abline(lm.fit2, lwd=3, col=2)
abline(-1, 0.5, lwd=3, col=3)
legend(-1, legend = c("Fit-Of-Model", "Regression-Of-Pop."), col=2:3, lwd=3)
abline(lm.fitnew2, lwd=3, col=2)
confint(lm.fit)
confint(lm.fitnew)
confint(lm.fitnew2)
library(MASS)
summary(Boston)
Boston$chas <- factor(Boston$chas, labels = c("N","Y"))
summary(Boston)
attach(Boston)
lm.zn = lm(crim~zn)
summary(lm.zn) # yes
?Boston
lm.rm = lm(crim~rm)
summary(lm.rm)
lm.all = lm(crim~.)
lm.all = lm(crim~., data="Boston")
lm.all = lm(crim~., data='Boston')
lm.all = lm(crim~., data=Boston)
summary(lm.all)
lm.black = lm(crim~black)
summary(lm.black)
summary(lm.all)
x = c(coefficients(lm.zn)[2], coefficients(lm.indus)[2], coefficients(lm.chas)[2],
coefficients(lm.nox)[2], coefficients(lm.rm)[2], coefficients(lm.age)[2],
coefficients(lm.dis)[2], coefficients(lm.rad)[2], coefficients(lm.tax)[2],
coefficients(lm.ptratio)[2], coefficients(lm.black)[2], coefficients(lm.lstat)[2],
coefficients(lm.medv)[2])
y = coefficients(lm.all)[2:14]
plot(x, y)
lm.indus = lm(crim~indus)
x = c(coefficients(lm.zn)[2], coefficients(lm.indus)[2], coefficients(lm.chas)[2],
coefficients(lm.nox)[2], coefficients(lm.rm)[2], coefficients(lm.age)[2],
coefficients(lm.dis)[2], coefficients(lm.rad)[2], coefficients(lm.tax)[2],
coefficients(lm.ptratio)[2], coefficients(lm.black)[2], coefficients(lm.lstat)[2],
coefficients(lm.medv)[2])
lm.all = lm(crim~., data=Boston)
lm.zn = lm(crim~zn)
lm.indus = lm(crim~indus)
lm.chas = lm(crim~chas)
lm.nox = lm(crim~nox)
lm.rm = lm(crim~rm)
lm.age = lm(crim~age)
lm.dis = lm(crim~dis)
lm.rad = lm(crim~rad)
lm.tax = lm(crim~tax)
lm.ptratio = lm(crim~ptratio)
lm.black = lm(crim~black)
lm.lstat = lm(crim~lstat)
lm.medv = lm(crim~medv)
x = c(coefficients(lm.zn)[2], coefficients(lm.indus)[2], coefficients(lm.chas)[2],
coefficients(lm.nox)[2], coefficients(lm.rm)[2], coefficients(lm.age)[2],
coefficients(lm.dis)[2], coefficients(lm.rad)[2], coefficients(lm.tax)[2],
coefficients(lm.ptratio)[2], coefficients(lm.black)[2], coefficients(lm.lstat)[2],
coefficients(lm.medv)[2])
y = coefficients(lm.all)[2:14]
plot(x, y)
lm.zn = lm(crim~poly(zn,3))
summary(lm.zn)
lm.indus = lm(crim~poly(indus,3))
summary(lm.indus)
lm.nox = lm(crim~poly(nox,3))
summary(lm.nox)
lm.rm = lm(crim~poly(rm,3))
summary(lm.rm)
lm.age = lm(crim~poly(age,3))
summary(lm.age)
lm.dis = lm(crim~poly(dis,3))
summary(lm.dis)
lm.rad = lm(crim~poly(rad,3))
summary(lm.rad)
lm.tax = lm(crim~poly(tax,3))
summary(lm.tax)
lm.ptratio = lm(crim~poly(ptratio,3))
summary(lm.ptratio)
lm.black = lm(crim~poly(black,3))
summary(lm.black
lm.black = lm(crim~poly(black,3))
summary(lm.black)
lm.lstat = lm(crim~poly(lstat,3))
summary(lm.lstat)
lm.medv = lm(crim~poly(medv,3))
summary(lm.medv)
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta #pretty slow (doesnt use formula (5.2) on page 180)
###me entry
cv.glm(Auto,glm.fit)$K
###
##Lets write a simple function to use formula (5.2)
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
## Now we try it out
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d]=loocv(glm.fit)
}
plot(degree,cv.error,type="b")
## 10-fold CV
cv.error10=rep(0,5)
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
getwd()
setwd("C:/Users/Naseem Ashraf/Desktop 1/Fall 16/Datamining")
library(ISLR)
library(ISLR)
dim(Hitters)
head(Hitters)
n = dimen[0]
dimen = dim(Hitters)
n = dimen[0]
n
n = dimen[1]
n
d = dimen[2]
head(Hitters)
d
library(ISLR)
dimen = dim(Hitters)
n = dimen[1]
d = dimen[2]
print("n = "+n)
print("n = "+n.toString)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
library(leaps)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
library(ISLR)
library(leaps)
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
library(ISLR)
? Hitters
summary(Hitters)
Hitters=na.omit(Hitters)
?na.omit
with(Hitters,sum(is.na(Salary)))
library(leaps)
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
with(Hitters,sum(is.na(Salary)))
library(ISLR)
dimen = dim(Hitters)
n = dimen[1]
d = dimen[2]
n
d
Hitters=na.omit(Hitters)
dimen = dim(Hitters)
n = dimen[1]
d = dimen[2]
n
d
library(leaps)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
require(ISLR)
require(tree)
attach(Carseats)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats, High)
tree.carseats=tree(High~.-Sales,data=Carseats)
d1 <- as.dendrogram(tree.carseats)
plot(tree.carseats)
text(d1,pretty=0, pos = 2, srt=90)
text(tree.carseats,pretty=0, pos = 2, srt=90)
plot(d1,type="rectangle", hang= -2)
plot(tree.carseats, hang= -1)
plot(tree.carseats, hang= -10)
text(tree.carseats,pretty=0, pos = 2, srt=90)
plot(tree.carseats, hang= 10)
text(tree.carseats,pretty=0, pos = 2, srt=90)
y <- tree.carseats$y
y <- tree.carseats$y
text(y+1,pretty=0, pos = 2, srt=90)
require(ISLR)
#install.packages('tree', repos="http://cran.r-project.org")
require(tree)
attach(Carseats)
hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats, High)
require(ISLR)
require(tree)
attach(Carseats)
hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats, High)
tree.carseats=tree(High~.-Sales,data=Carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
set.seed(1011)
train=sample(1:nrow(Carseats),250)
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+33)/150
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
cv.carseats
plot(cv.carseats)
prune.carseats=prune.misclass(tree.carseats,best=13)
plot(prune.carseats);text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+32)/150
library(affy)
library(limma)
setwd("/Users/Pat/Documents/R/CS_640/labs/microarray/GSE2443_cel")
targets <- readTargets("pheno2443.txt", row.names="filename")
MyBioInfData <- ReadAffy(filenames=targets$fileName)
library(affy)
library(limma)
setwd("/Users/Naseem Ashraf/Desktop 1/Fall 16/Bioinformatics/Microarray/Assignment Data Set/GSE2443_cel")
targets <- readTargets("pheno2443.txt", row.names="filename")
MyBioInfData <- ReadAffy(filenames=targets$fileName)
eset <- rma(MyBioInfData)
deg <- AffyRNAdeg(MyBioInfData)
Group <- factor(targets[,2], levels=c("untreated","androgen-independent"))
design <- model.matrix(~Group) # coeficient as difference from reference level
fit <- lmFit(eset, design)
fit <- eBayes(fit)
res1 <- topTable(fit, coef=2, adjust="BH")
library(calibrate)
install.packages('calibrate')
library(calibrate)
deg <- AffyRNAdeg(MyBioInfData)
Group <- factor(targets[,2], levels=c("untreated","androgen-independent"))
design <- model.matrix(~Group) # coeficient as difference from reference level
colnames(design) <- c("untreated","androgen-independent")
fit <- lmFit(eset, design)
fit <- eBayes(fit)
res1 <- topTable(fit, coef=2, adjust="BH")
head(res1)
with(res1, plot(logFC, -log10(P.Value), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(subset(res1, adj.P.Val<.05 ), points(logFC, -log10(pvalue), pch=20, col="red"))
with(subset(res1, adj.P.Val<.05 ), points(logFC, -log10(P.Value), pch=20, col="red"))
with(subset(res1, abs(logFC)>1), points(logFC, -log10(P.Value), pch=20, col="orange"))
with(subset(res1, adj.P.Val<.05 & abs(logFC)>1), points(logFC, -log10(P.Value), pch=20, col="green"))
library(calibrate)
with(subset(res1, adj.P.Val<.05 & abs(logFC)>1), textxy(logFC, -log10(pvalue), labs=Gene, cex=.8))##?
with(subset(res1, adj.P.Val<.05 & abs(logFC)>1), textxy(logFC, -log10(P.Value), labs=Gene, cex=.8))##?
